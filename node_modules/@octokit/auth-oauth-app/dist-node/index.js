'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var universalUserAgent = require('universal-user-agent');
var request = require('@octokit/request');
var btoa = _interopDefault(require('btoa-lite'));
var requestError = require('@octokit/request-error');

async function getOAuthAccessToken(state, options) {
  const authOptionsPassed = options.auth ? typeof options.auth.code !== "undefined" : false;
  const authOptions = options.auth && authOptionsPassed ? options.auth : state;

  if (state.token && !authOptionsPassed) {
    return state.token;
  } // The "/login/oauth/access_token" is not part of the REST API hosted on api.github.com,
  // instead it’s using the github.com domain.


  const route = /^https:\/\/(api\.)?github\.com$/.test(state.request.endpoint.DEFAULTS.baseUrl) ? "POST https://github.com/login/oauth/access_token" : `POST ${state.request.endpoint.DEFAULTS.baseUrl.replace("/api/v3", "/login/oauth/access_token")}`;
  const request = options.request || state.request;
  const parameters = {
    headers: {
      accept: "application/json"
    },
    client_id: state.clientId,
    client_secret: state.clientSecret,
    code: authOptions.code,
    redirect_uri: authOptions.redirectUrl,
    state: authOptions.state
  };
  const response = await request(route, parameters);

  if (response.data.error !== undefined) {
    throw new requestError.RequestError(`${response.data.error_description} (${response.data.error})`, response.status, {
      headers: response.headers,
      request: request.endpoint(route, parameters)
    });
  }

  const {
    data
  } = response;
  const newToken = {
    token: data.access_token,
    scopes: data.scope.split(/,\s*/).filter(Boolean)
  };

  if (!authOptionsPassed) {
    state.token = newToken;
  }

  return newToken;
}

async function auth(state, authOptions) {
  if (authOptions.type === "token") {
    console.warn(`[@octokit/auth-oauth-app] "{type: 'token'}" is deprecated, use "{type: 'oauth-user'}" instead`);
  }

  if (authOptions.type === "token" || authOptions.type === "oauth-user") {
    const {
      token,
      scopes
    } = await getOAuthAccessToken(state, {
      auth: authOptions
    });
    return {
      type: "token",
      token,
      tokenType: "oauth",
      scopes
    };
  }

  return {
    type: "oauth-app",
    clientId: state.clientId,
    clientSecret: state.clientSecret,
    headers: {
      authorization: `basic ${btoa(`${state.clientId}:${state.clientSecret}`)}`
    }
  };
}

/**
 * The following endpoints require an OAuth App to authenticate using its client_id and client_secret.
 *
 * - [`POST /applications/{client_id}/token`](https://developer.github.com/v3/apps/oauth_applications/#check-a-token) - Check a token
 * - [`PATCH /applications/{client_id}/token`](https://developer.github.com/v3/apps/oauth_applications/#reset-a-token) - Reset a token
 * - [`DELETE /applications/{client_id}/token`](https://developer.github.com/v3/apps/oauth_applications/#reset-a-token) - Delete an app token
 * - [`DELETE /applications/{client_id}/grant`](https://developer.github.com/v3/apps/oauth_applications/#delete-an-app-authorization) - Delete an app authorization
 *
 * deprecated:
 *
 * - [`GET /applications/{client_id}/tokens/{access_token}`](https://developer.github.com/v3/apps/oauth_applications/#check-an-authorization) - Check an authorization
 * - [`POST /applications/{client_id}/tokens/{access_token}`](https://developer.github.com/v3/apps/oauth_applications/#reset-an-authorization) - Reset an authorization
 * - [`DELETE /applications/{client_id}/tokens/{access_token}`](https://developer.github.com/v3/apps/oauth_applications/#revoke-an-authorization-for-an-application) - Revoke an authorization for an application
 * - [`DELETE /applications/{client_id}/grants/{access_token}`](https://developer.github.com/v3/apps/oauth_applications/#revoke-a-grant-for-an-application) - Revoke a grant for an application
 */
const ROUTES_REQUIRING_BASIC_AUTH = /\/applications\/[:{]?[\w_]+\}?\/(token|grant)(s\/[:{]?[\w_]+\}?)?($|\?)/;
function requiresBasicAuth(url) {
  return url && ROUTES_REQUIRING_BASIC_AUTH.test(url);
}

async function hook(state, request, route, parameters) {
  let endpoint = request.endpoint.merge(route, parameters); // Do not intercept request to retrieve a new token

  if (/\/login\/oauth\/access_token$/.test(endpoint.url)) {
    return request(endpoint);
  }

  if (!state.code || requiresBasicAuth(endpoint.url)) {
    const credentials = btoa(`${state.clientId}:${state.clientSecret}`);
    endpoint.headers.authorization = `basic ${credentials}`;
    const response = await request(endpoint); // `POST /applications/{client_id}/tokens/{access_token}` (legacy) or
    // `PATCH /applications/{client_id}/token` resets the passed token
    // and returns a new one. If that’s the current request then update internal state.
    // Regex supports both the `{param}` as well as the legacy `:param` notation

    const isLegacyTokenResetRequest = endpoint.method === "POST" && /^\/applications\/[:{]?[\w_]+\}?\/tokens\/[:{]?[\w_]+\}?$/.test(endpoint.url);
    const isTokenResetRequest = endpoint.method === "PATCH" && /^\/applications\/[:{]?[\w_]+\}?\/token$/.test(endpoint.url);

    if (isLegacyTokenResetRequest || isTokenResetRequest) {
      state.token = {
        token: response.data.token,
        // @ts-ignore figure this out
        scope: response.data.scopes
      };
    }

    return response;
  }

  console.warn(`[@octokit/auth-oauth-app] setting user authentication is deprecated. Use "@octokit/auth-oauth-user" instead`);
  const {
    token
  } = await getOAuthAccessToken(state, {
    request
  });
  endpoint.headers.authorization = `token ${token}`;
  return request(endpoint);
}

const VERSION = "3.1.1";

const deprecatedStrategyOptions = ["code", "redirectUrl", "state"];
function createOAuthAppAuth(options) {
  const usedDeprecatedOptions = deprecatedStrategyOptions.filter(option => option in options);

  if (usedDeprecatedOptions.length) {
    console.warn(`[@octokit/auth-oauth-app] "${usedDeprecatedOptions.join(", ")}" strategy options are deprecated. Use "@octokit/auth-oauth-user" instead`);
  }

  const state = Object.assign({
    request: request.request.defaults({
      headers: {
        "user-agent": `octokit-auth-oauth-app.js/${VERSION} ${universalUserAgent.getUserAgent()}`
      }
    })
  }, options); // @ts-expect-error wtf

  return Object.assign(auth.bind(null, state), {
    hook: hook.bind(null, state)
  });
}

exports.createOAuthAppAuth = createOAuthAppAuth;
//# sourceMappingURL=index.js.map
